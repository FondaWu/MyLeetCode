package dp;
/**
 123. 买卖股票的最佳时机 III（困难）
 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 示例 1:
 输入：prices = [3,3,5,0,0,3,1,4]
 输出：6
 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 示例 2：
 输入：prices = [1,2,3,4,5]
 输出：4
 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 示例 3：
 输入：prices = [7,6,4,3,1]
 输出：0
 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 示例 4：
 输入：prices = [1]
 输出：0
 【提示】
 1）1 <= prices.length <= 105
 2）0 <= prices[i] <= 105
 **/
public class MaxProfit3 {
    public static void main(String[] args) {
        //int[] prices = {1, 2, 3, 4, 5};
        //int[] prices = {2, 1, 2, 0, 1};
        int[] prices = {1, 10, 9, 8, 7};
        int result = new MaxProfit3().maxProfit(prices);
        System.out.println("计算结果：" + result);
    }

    public int maxProfit(int[] prices) {
        int[][]dp = new int[prices.length][4];
        dp[0][0] = 0;
        dp[0][1] = 0;
        dp[0][2] = -prices[0];
        dp[0][3] = -prices[0];
        for (int i = 1; i < prices.length; ++i) {
            // 今天手里没有股票且一次交易的最大获利：昨天手里没有股票，且有一次交易和昨天0次交易今天卖掉股票两者最大值
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] + prices[i]);
            // 今天手里没有股票且两次交易的最大获利：昨天手里没有股票且有两次交易，和昨天1次交易今天卖掉股票两者最大值
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][3] + prices[i]);
            // 今天手里有股票且0次交易的最大获利：昨天手里股票且有1次交易，和昨天1次交易今天买股票两者最大值
            dp[i][2] = Math.max(dp[i - 1][2], - prices[i]);
            // 今天手里有股票且1次交易的最大获利：昨天手里有股票且有1次交易，和昨天没有股票且有1次交易然后今天买股票的两者最大值
            dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][0] - prices[i]);
        }
        return dp[prices.length - 1][1];
    }

    public int maxProfit2(int[] prices) {
        int[][]dp = new int[prices.length][6];
        dp[0][0] = 0;
        dp[0][1] = 0;
        dp[0][2] = 0;
        dp[0][3] = -prices[0];
        dp[0][4] = -prices[0];
        dp[0][5] = -prices[0];
        for (int i = 1; i < prices.length; ++i) {
            // 今天手里没有股票，且0次交易的最大获利0
            //dp[i][0] = 0;
            // 今天手里没有股票，且一次交易的最大获利：昨天手里没有股票，且有一次交易和昨天0次交易今天卖掉股票两者最大值
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][3] + prices[i]);
            // 今天手里没有股票，且两次交易的最大获利：昨天手里没有股票且有两次交易，和昨天1次交易今天卖掉股票两者最大值
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][4] + prices[i]);
            // 今天手里有股票，且0次交易的最大获利：昨天手里股票且有1次交易，和昨天1次交易今天买股票两者最大值
            dp[i][3] = Math.max(dp[i - 1][3], - prices[i]);
            // 今天手里有股票，且1次交易的最大获利：昨天手里有股票且有1次交易，和昨天没有股票且有1次交易然后今天买股票的两者最大值
            dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][1] - prices[i]);
            // 今天手里有股票，且2次交易的最大获利：昨天手里有股票且有2次交易，和昨天有股票，且1次交易然后今天卖掉股票两者最大值
            //dp[i][5] = Math.max(dp[i - 1][5], dp[i - 1][2] + prices[i]);
        }
        return dp[prices.length - 1][2];
    }

    public int maxProfit1(int[] prices) {
        int[][][] dp = new int[prices.length][2][3];
        dp[0][0][0] = 0;
        dp[0][0][1] = 0;
        dp[0][0][2] = 0;
        dp[0][1][0] = -prices[0];
        dp[0][1][1] = -prices[0];
        dp[0][1][2] = -prices[0];
        for (int i = 1; i < prices.length; ++i) {
            // 今天手里没有股票，且0次交易的最大获利0
            dp[i][0][0] = 0;
            // 今天手里没有股票，且一次交易的最大获利：昨天手里没有股票，且有一次交易和昨天0次交易今天卖掉股票两者最大值
            dp[i][0][1] = Math.max(dp[i - 1][0][1], dp[i - 1][1][0] + prices[i]);
            // 今天手里没有股票，且两次交易的最大获利：昨天手里没有股票且有两次交易，和昨天1次交易今天卖掉股票两者最大值
            dp[i][0][2] = Math.max(dp[i - 1][0][2], dp[i - 1][1][1] + prices[i]);
            // 今天手里有股票，且0次交易的最大获利：昨天手里股票且有1次交易，和昨天1次交易今天买股票两者最大值
            dp[i][1][0] = Math.max(dp[i - 1][1][0], dp[i - 1][0][0] - prices[i]);
            // 今天手里有股票，且1次交易的最大获利：昨天手里有股票且有1次交易，和昨天没有股票且有1次交易然后今天买股票的两者最大值
            dp[i][1][1] = Math.max(dp[i - 1][1][1], dp[i - 1][0][1] - prices[i]);
            // 今天手里有股票，且2次交易的最大获利：昨天手里有股票且有2次交易，和昨天有股票，且1次交易然后今天卖掉股票两者最大值
            dp[i][1][2] = Math.max(dp[i - 1][1][2], dp[i - 1][0][2] + prices[i]);
        }
        return dp[prices.length - 1][0][2];
    }
}
